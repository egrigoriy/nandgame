Thought process: 

ALU

The ALU (Arithmetic Logic Unit) combines the logic and arithmetic operations:

Input	Output
u	op1	op0	
0	0	0	X and Y
0	0	1	X or Y
0	1	0	X xor Y
0	1	1	invert X
1	0	0	X + Y
1	1	0	X - Y
1	0	1	X + 1
1	1	1	X - 1

Two additional flags modify the operands:

When the sw flag is 1, the X and Y inputs are swapped.
When the zx flag is 1, the left operand is replaced with 0.
This affects the operands as shown here for the example of X - Y:

zx	sw	Effective operation
0	0	X - Y
0	1	Y - X
1	0	0 - Y
1	1	0 - X

===
One can observe that u input selects between Logic and Arithmetic Unit. Thus, a SELECT16 is needed.
What about operands comming to these units?
It is given that when the zx flag is 1, the left operand is replaced with 0. Thus, zx bit selects between left operand and 0. Thus, another SELECT16 is needed.
However, at its moment of selection it must be know which operand is "left". So first we swap then apply zx operation on the swap output left operand.

But how a SWAPPER can be implemented?
The simplest solution is to use 2 SELECT16 elements. Their outputs will be the outputs of the SWAPPER.
Each one is SELECT16 will be controlled by the sw input bit. 
However, the data inputs are connected as follow: D0=X, D1=Y for the "left" select, and D0=Y, D1=X for the "right" select.
In this way, sp=0 will provide the pair of operands (X Y) and sp=1 the pair of operands (Y X).